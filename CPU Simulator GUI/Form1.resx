<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        TkSuQmCC
</value>
  </data>
</root>